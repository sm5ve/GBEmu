package com.vtsman.gbemu;

import java.util.Random;

//Spencer Martin
//5/20/16
//This class simulates the Gameboy's IO registers. In this class file,
//Things such as a random number generator the buttons are exposed to the CPU
public class IO implements IAddressable {
	//@formatter:off

	public static final int[] ioReset = {
			0xCF, 0x00, 0x7C, 0xFF, 0x1F, 0x00, 0x00, 0xF8,      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,//0x00
			0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00,      0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,//0x10
			0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF,      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,//0x20
			0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,      0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,//0x30
			0x80, 0x81, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,//0x40
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF,      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,//0x50
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,      0xC0, 0xFF, 0xC1, 0x54, 0xFE, 0xFF, 0xFF, 0xFF,//0x60
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00,      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,//0x70
			0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,      0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
			0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,      0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
			0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,      0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
			0x45, 0xEC, 0x52, 0xFA, 0x08, 0xB7, 0x07, 0x5D,      0x01, 0xFD, 0xC0, 0xFF, 0x08, 0xFC, 0x00, 0xE5,
			0x0B, 0xF8, 0xC2, 0xCE, 0xF4, 0xF9, 0x0F, 0x7F,      0x45, 0x6D, 0x3D, 0xFE, 0x46, 0x97, 0x33, 0x5E,
			0x08, 0xEF, 0xF1, 0xFF, 0x86, 0x83, 0x24, 0x74,      0x12, 0xFC, 0x00, 0x9F, 0xB4, 0xB7, 0x06, 0xD5,
			0xD0, 0x7A, 0x00, 0x9E, 0x04, 0x5F, 0x41, 0x2F,      0x1D, 0x77, 0x36, 0x75, 0x81, 0xAA, 0x70, 0x3A,
			0x98, 0xD1, 0x71, 0x02, 0x4D, 0x01, 0xC1, 0xFF,      0x0D, 0x00, 0xD3, 0x05, 0xF9, 0x00, 0x0B, 0x00 };

	//@formatter:on
	private byte[] io = new byte[0x100];

	//The buttons are split into two banks
	private boolean dpad = true;
	private boolean buttons = true;

	private int butt = 0xf;
	private int pad = 0xf;

	private byte speedFlag = 0;

	private GPU gpu;
	private MMU mmu;
	private RAM ram;

	private Random r = new Random();

	@Override
	public byte read(int addr) {
		if (addr == 0xff00) {
			byte out = (byte) 0xff;
			if (dpad) {
				out = (byte) pad;
			}
			if (buttons) {
				out = (byte) butt;
			}
			if (dpad) {
				out |= 1 << 4;
			}
			if (buttons) {
				out |= 1 << 5;
			}
			return out;
		}
		if (addr == 0xff01) {
			//TODO serial
		}
		if (addr == 0xff02) {
			//TODO serial
		}
		if (addr == 0xff70) {
			return io[0x70];
		}
		if (addr == 0xff4d) {
			return this.speedFlag;
		}
		System.out.printf("IO read from 0x%04x\n", addr);
		return io[addr - 0xff00];//0;
	}

	@Override
	public void write(int addr, byte value) {
		if (addr == 0xff70) {
			value &= 7;
			io[0x70] = value;
			ram.setBank(value == 0 ? 1 : value);
			System.out.println("Requested RAM bank change to " + value);
		} else if (addr == 0xff00) {
			dpad = ((value & (1 << 4)) == 0);
			buttons = ((value & (1 << 5)) == 0);
		} else if (addr == 0xff01) {
			//TODO serial
		} else if (addr == 0xff02) {
			//TODO serial
		} else if (addr == 0xff4d) {
			this.speedFlag = value;
			if ((value & (1 << 7)) != 0) {
				this.speedFlag |= 1;
			}
		} else {
			System.out.printf("IO write to 0x%04x\n", addr);
			io[addr - 0xff00] = value;
		}
	}

	public void setGPU(GPU g) {
		this.gpu = g;
	}

	public void setMMU(MMU m) {
		this.mmu = m;
	}

	public void setRAM(RAM r) {
		this.ram = r;
	}

	@Override
	public boolean isAddressInRange(int addr) {
		return addr < 0xff80 && addr >= 0xff00;
	}

	public void setUp(boolean pressed) {
		this.pad = this.setButton(pad, 1 << 2, pressed);
	}

	public void setDown(boolean pressed) {
		this.pad = this.setButton(pad, 1 << 3, pressed);
	}

	public void setRight(boolean pressed) {
		this.pad = this.setButton(pad, 1 << 0, pressed);
	}

	public void setLeft(boolean pressed) {
		this.pad = this.setButton(pad, 1 << 1, pressed);
	}

	public void setA(boolean pressed) {
		this.butt = this.setButton(butt, 1 << 0, pressed);
	}

	public void setB(boolean pressed) {
		this.butt = this.setButton(butt, 1 << 1, pressed);
	}

	public void setStart(boolean pressed) {
		this.butt = this.setButton(butt, 1 << 3, pressed);
	}

	public void setSelect(boolean pressed) {
		this.butt = this.setButton(butt, 1 << 2, pressed);
	}

	private int setButton(int base, int mask, boolean pressed) {
		if (pressed) {
			return base & ~mask;
		}
		return base | mask;
	}
}
