package com.vtsman.gbemu;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;

//Spencer Martin
//5/20/16
//This class exposes debugging buffers rendered in the GPU
public class GPUDebugScreen extends JFrame {
	//Autogenerated by eclipse, it complains without it
	private static final long serialVersionUID = 7640331520500116820L;

	//2 tile sheets
	public TileSheet map1 = new TileSheet();
	public TileSheet map2 = new TileSheet();

	//Color pallets
	private Color[][] bg = new Color[8][8];
	private Pallet bp = new Pallet();

	public GPUDebugScreen() {
		//Set up the window
		JTabbedPane tabbedPane = new JTabbedPane();
		tabbedPane.add("Tile map 1", map1);
		tabbedPane.add("Tile map 2", map2);
		//Initialize the pallets
		for (int i = 0; i < bg.length; i++) {
			for (int j = 0; j < bg[i].length; j++) {
				bg[i][j] = Color.white;
			}
		}
		tabbedPane.add("Pallets", bp);
		this.setSize(new Dimension(280, 320));
		this.add(tabbedPane);
		this.setLocationRelativeTo(null);
		this.setTitle("GPU Debug Screen");
		this.setVisible(true);
	}

	//Update pallets
	public void updateBgPallet(Color[][] pallet) {
		this.bg = pallet;
		this.bp.repaint();
	}

	class Pallet extends JPanel {

		/**
		 * 
		 */
		private static final long serialVersionUID = 180404455149914509L;
		int scale = 32;

		public Pallet() {
			this.setSize(scale * 8, scale * 8);
		}

		@Override
		public void paint(Graphics g) {
			for (int i = 0; i < 8; i++) {
				for (int j = 0; j < 8; j++) {
					g.setColor(bg[j][i]);
					g.fillRect(i * scale, j * scale, scale, scale);
				}
			}
		}
	}

	//Draws the buffer from the GPU onto the screen
	class TileSheet extends JPanel {

		/**
		 * 
		 */
		private static final long serialVersionUID = 5753332083610229347L;
		int scale = 2;

		public TileSheet() {
			this.setSize(16 * scale * 8, 16 * scale * 8);
		}

		public void update(BufferedImage i) {
			this.image = i;
			this.repaint();
		}

		BufferedImage image = null;

		@Override
		public void paint(Graphics g) {
			if (image != null) {
				g.drawImage(image, 0, 0, image.getWidth() * scale, image.getHeight() * scale, null);
			}
		}
	}
}
